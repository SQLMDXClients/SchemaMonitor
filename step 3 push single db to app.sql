USE DATABASE SCHEMAMONITOR;

-- We make the assumption that the application is already installed
-- and the database is called SCHEMAMONITOR.

DECLARE 
    
    DATABASE_NAME VARCHAR(200);

    DESCRIPTION VARCHAR(1000) DEFAULT 'DATABASE SCHEMA SNAPSHOT';

    RES RESULTSET;
    SQLSTMT STRING;
    SESSION_ID VARCHAR(36);
    RESPONSE STRING;

    LAST_QUERY_ID VARCHAR(36);

    CATALOG_NAME VARCHAR(200);
    SCHEMA_NAME VARCHAR(200);

    SCHEMA_CURSOR CURSOR FOR SELECT CATALOG_NAME, SCHEMA_NAME 
                             FROM _METADATA.SNOWFLAKE_SCHEMAS 
                             WHERE SESSION_ID = ?;

    TABLE_CATALOG VARCHAR(200);
    TABLE_SCHEMA VARCHAR(200); 
    TABLE_NAME VARCHAR(200);

    TABLE_CURSOR CURSOR FOR SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME
                             FROM _METADATA.SNOWFLAKE_TABLES
                             WHERE SESSION_ID = ?;                             
    
BEGIN

    -- THIS DOES NOT USE A CURSOR TO STEP THORUGH EACH DATABASE
    -- INSTEAD IT USES A SINGLE DATABASE NAME

    DATABASE_NAME := '<<ENTER THE DATABASE NAME HERE>>';
    
    SESSION_ID := UUID_STRING();

    INSERT INTO _METADATA.SNOWFLAKE_SESSIONS (SESSION_ID, USER, ORGANIZATION_NAME, ACCOUNT_NAME,
                DATABASE_NAME, DESCRIPTION)
    SELECT :SESSION_ID, CURRENT_USER(), CURRENT_ORGANIZATION_NAME(), CURRENT_ACCOUNT_NAME(),
            :DATABASE_NAME, :DESCRIPTION;


    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_COLUMNS (
    SESSION_ID, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, COLUMN_DEFAULT, 
    IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, 
    NUMERIC_PRECISION_RADIX, NUMERIC_SCALE, DATETIME_PRECISION, INTERVAL_TYPE, INTERVAL_PRECISION, 
    CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA, CHARACTER_SET_NAME, COLLATION_CATALOG, COLLATION_SCHEMA, 
    COLLATION_NAME, DOMAIN_CATALOG, DOMAIN_SCHEMA, DOMAIN_NAME, UDT_CATALOG, UDT_SCHEMA, UDT_NAME, 
    SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_NAME, MAXIMUM_CARDINALITY, DTD_IDENTIFIER, IS_SELF_REFERENCING, 
    IS_IDENTITY, IDENTITY_GENERATION, IDENTITY_START, IDENTITY_INCREMENT, IDENTITY_MAXIMUM, 
    IDENTITY_MINIMUM, IDENTITY_CYCLE, IDENTITY_ORDERED, SCHEMA_EVOLUTION_RECORD, COMMENT )
    SELECT ''' || :SESSION_ID || ''', TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, COLUMN_DEFAULT, 
    IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, 
    NUMERIC_PRECISION_RADIX, NUMERIC_SCALE, DATETIME_PRECISION, INTERVAL_TYPE, INTERVAL_PRECISION, 
    CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA, CHARACTER_SET_NAME, COLLATION_CATALOG, COLLATION_SCHEMA, 
    COLLATION_NAME, DOMAIN_CATALOG, DOMAIN_SCHEMA, DOMAIN_NAME, UDT_CATALOG, UDT_SCHEMA, UDT_NAME, 
    SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_NAME, MAXIMUM_CARDINALITY, DTD_IDENTIFIER, IS_SELF_REFERENCING, 
    IS_IDENTITY, IDENTITY_GENERATION, IDENTITY_START, IDENTITY_INCREMENT, IDENTITY_MAXIMUM, 
    IDENTITY_MINIMUM, IDENTITY_CYCLE, IDENTITY_ORDERED, SCHEMA_EVOLUTION_RECORD, COMMENT 
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;


    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_DATABASES (
    SESSION_ID, DATABASE_NAME, DATABASE_OWNER, IS_TRANSIENT, COMMENT, CREATED, LAST_ALTERED, RETENTION_TIME, TYPE)
    SELECT ''' || :SESSION_ID || ''', DATABASE_NAME, DATABASE_OWNER, IS_TRANSIENT, COMMENT, CREATED, LAST_ALTERED, 
    RETENTION_TIME, TYPE
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.DATABASES WHERE DATABASE_NAME = ''' || :DATABASE_NAME || '''';

    EXECUTE IMMEDIATE :SQLSTMT;


    EXECUTE IMMEDIATE 'SHOW PARAMETERS IN DATABASE ' || :DATABASE_NAME;

    LAST_QUERY_ID := LAST_QUERY_ID();

    UPDATE _METADATA.SNOWFLAKE_DATABASES AS t
    SET t.BASE_LOCATION_PREFIX = s.BASE_LOCATION_PREFIX,
        t.CATALOG = s.CATALOG,
        t.CATALOG_SYNC = s.CATALOG_SYNC,
        t.DATA_RETENTION_TIME_IN_DAYS = s.DATA_RETENTION_TIME_IN_DAYS,
        t.DEFAULT_DDL_COLLATION = s.DEFAULT_DDL_COLLATION,
        t.DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU = s.DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU,
        t.DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU = s.DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU,
        t.DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE = s.DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE,
        t.ENABLE_CONSOLE_OUTPUT = s.ENABLE_CONSOLE_OUTPUT,
        t.ENABLE_SYSTEM_SET_APP_VERSION_IN_CURRENT_CALL_CONTEXT = s.ENABLE_SYSTEM_SET_APP_VERSION_IN_CURRENT_CALL_CONTEXT,
        t.EVENT_TABLE = s.EVENT_TABLE,
        t.EXTERNAL_VOLUME = s.EXTERNAL_VOLUME,
        t.LOG_LEVEL = s.LOG_LEVEL,
        t.MAX_DATA_EXTENSION_TIME_IN_DAYS = s.MAX_DATA_EXTENSION_TIME_IN_DAYS,
        t.METRIC_LEVEL = s.METRIC_LEVEL,
        t.OPTIMIZE_DATA_LAYOUT = s.OPTIMIZE_DATA_LAYOUT,
        t.QUOTED_IDENTIFIERS_IGNORE_CASE = s.QUOTED_IDENTIFIERS_IGNORE_CASE,
        t.REPLACE_INVALID_CHARACTERS = s.REPLACE_INVALID_CHARACTERS,
        t.REPLICABLE_WITH_FAILOVER_GROUPS = s.REPLICABLE_WITH_FAILOVER_GROUPS,
        t.SERVERLESS_TASK_MAX_STATEMENT_SIZE = s.SERVERLESS_TASK_MAX_STATEMENT_SIZE,
        t.SERVERLESS_TASK_MIN_STATEMENT_SIZE = s.SERVERLESS_TASK_MIN_STATEMENT_SIZE,
        t.STORAGE_SERIALIZATION_POLICY = s.STORAGE_SERIALIZATION_POLICY,
        t.SUSPEND_TASK_AFTER_NUM_FAILURES = s.SUSPEND_TASK_AFTER_NUM_FAILURES,
        t.TASK_AUTO_RETRY_ATTEMPTS = s.TASK_AUTO_RETRY_ATTEMPTS,
        t.TRACE_LEVEL = s.TRACE_LEVEL,
        t.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = s.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE,
        t.USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS = s.USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS,
        t.USER_TASK_TIMEOUT_MS = s.USER_TASK_TIMEOUT_MS
    FROM (SELECT BASE_LOCATION_PREFIX, CATALOG, CATALOG_SYNC, DATA_RETENTION_TIME_IN_DAYS, DEFAULT_DDL_COLLATION,
        DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU, DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU, DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE,
        ENABLE_CONSOLE_OUTPUT, ENABLE_SYSTEM_SET_APP_VERSION_IN_CURRENT_CALL_CONTEXT, EVENT_TABLE,
        EXTERNAL_VOLUME, LOG_LEVEL, MAX_DATA_EXTENSION_TIME_IN_DAYS, METRIC_LEVEL, OPTIMIZE_DATA_LAYOUT,
        QUOTED_IDENTIFIERS_IGNORE_CASE, REPLACE_INVALID_CHARACTERS, REPLICABLE_WITH_FAILOVER_GROUPS,
        SERVERLESS_TASK_MAX_STATEMENT_SIZE, SERVERLESS_TASK_MIN_STATEMENT_SIZE, STORAGE_SERIALIZATION_POLICY,
        SUSPEND_TASK_AFTER_NUM_FAILURES, TASK_AUTO_RETRY_ATTEMPTS, TRACE_LEVEL, USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE,
        USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS, USER_TASK_TIMEOUT_MS
        FROM (SELECT "key","value" FROM TABLE(RESULT_SCAN(:LAST_QUERY_ID))) 
            PIVOT(MAX("value") FOR "key" IN ('BASE_LOCATION_PREFIX', 'CATALOG', 'CATALOG_SYNC', 'DATA_RETENTION_TIME_IN_DAYS',
            'DEFAULT_DDL_COLLATION', 'DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU', 'DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU', 
            'DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE', 'ENABLE_CONSOLE_OUTPUT', 'ENABLE_SYSTEM_SET_APP_VERSION_IN_CURRENT_CALL_CONTEXT', 
            'EVENT_TABLE', 'EXTERNAL_VOLUME', 'LOG_LEVEL', 'MAX_DATA_EXTENSION_TIME_IN_DAYS', 'METRIC_LEVEL', 
            'OPTIMIZE_DATA_LAYOUT', 'QUOTED_IDENTIFIERS_IGNORE_CASE', 'REPLACE_INVALID_CHARACTERS', 
            'REPLICABLE_WITH_FAILOVER_GROUPS', 'SERVERLESS_TASK_MAX_STATEMENT_SIZE', 'SERVERLESS_TASK_MIN_STATEMENT_SIZE', 
            'STORAGE_SERIALIZATION_POLICY', 'SUSPEND_TASK_AFTER_NUM_FAILURES', 'TASK_AUTO_RETRY_ATTEMPTS', 'TRACE_LEVEL', 
            'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE', 'USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS', 'USER_TASK_TIMEOUT_MS'))
            AS X(BASE_LOCATION_PREFIX, CATALOG, CATALOG_SYNC, DATA_RETENTION_TIME_IN_DAYS, DEFAULT_DDL_COLLATION,
            DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU, DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU, DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE,
            ENABLE_CONSOLE_OUTPUT, ENABLE_SYSTEM_SET_APP_VERSION_IN_CURRENT_CALL_CONTEXT, EVENT_TABLE,
            EXTERNAL_VOLUME, LOG_LEVEL, MAX_DATA_EXTENSION_TIME_IN_DAYS, METRIC_LEVEL, OPTIMIZE_DATA_LAYOUT,
            QUOTED_IDENTIFIERS_IGNORE_CASE, REPLACE_INVALID_CHARACTERS, REPLICABLE_WITH_FAILOVER_GROUPS,
            SERVERLESS_TASK_MAX_STATEMENT_SIZE, SERVERLESS_TASK_MIN_STATEMENT_SIZE, STORAGE_SERIALIZATION_POLICY,
            SUSPEND_TASK_AFTER_NUM_FAILURES, TASK_AUTO_RETRY_ATTEMPTS, TRACE_LEVEL, USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE,
            USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS, USER_TASK_TIMEOUT_MS)) s
            WHERE t.SESSION_ID = :SESSION_ID AND 
                    t.DATABASE_NAME = :DATABASE_NAME;

    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_FILE_FORMATS (
    SESSION_ID, FILE_FORMAT_CATALOG, FILE_FORMAT_SCHEMA, FILE_FORMAT_NAME, FILE_FORMAT_OWNER, FILE_FORMAT_TYPE,
    RECORD_DELIMITER, FIELD_DELIMITER, SKIP_HEADER, DATE_FORMAT, TIME_FORMAT, TIMESTAMP_FORMAT, BINARY_FORMAT,
    ESCAPE, ESCAPE_UNENCLOSED_FIELD, TRIM_SPACE, FIELD_OPTIONALLY_ENCLOSED_BY, NULL_IF, COMPRESSION,
    ERROR_ON_COLUMN_COUNT_MISMATCH, CREATED, LAST_ALTERED, COMMENT )
    SELECT ''' || :SESSION_ID || ''', FILE_FORMAT_CATALOG, FILE_FORMAT_SCHEMA, FILE_FORMAT_NAME, FILE_FORMAT_OWNER, FILE_FORMAT_TYPE,
    RECORD_DELIMITER, FIELD_DELIMITER, SKIP_HEADER, DATE_FORMAT, TIME_FORMAT, TIMESTAMP_FORMAT, BINARY_FORMAT,
    ESCAPE, ESCAPE_UNENCLOSED_FIELD, TRIM_SPACE, FIELD_OPTIONALLY_ENCLOSED_BY, NULL_IF, COMPRESSION,
    ERROR_ON_COLUMN_COUNT_MISMATCH, CREATED, LAST_ALTERED, COMMENT
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.FILE_FORMATS WHERE FILE_FORMAT_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;


    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_FUNCTIONS (
    SESSION_ID, FUNCTION_CATALOG, FUNCTION_SCHEMA, FUNCTION_NAME, FUNCTION_OWNER, ARGUMENT_SIGNATURE, 
    DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, 
    NUMERIC_SCALE, FUNCTION_LANGUAGE, FUNCTION_DEFINITION, VOLATILITY, IS_NULL_CALL, IS_SECURE, CREATED, 
    LAST_ALTERED, COMMENT, IS_EXTERNAL, API_INTEGRATION, CONTEXT_HEADERS, MAX_BATCH_ROWS, REQUEST_TRANSLATOR, 
    RESPONSE_TRANSLATOR, COMPRESSION, IMPORTS, HANDLER, TARGET_PATH, RUNTIME_VERSION, PACKAGES, 
    INSTALLED_PACKAGES, IS_MEMOIZABLE, EXTERNAL_ACCESS_INTEGRATIONS, SECRETS, IS_DATA_METRIC, IS_AGGREGATE )
    SELECT ''' || :SESSION_ID || ''', FUNCTION_CATALOG, FUNCTION_SCHEMA, FUNCTION_NAME, FUNCTION_OWNER, ARGUMENT_SIGNATURE, 
    DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, 
    NUMERIC_SCALE, FUNCTION_LANGUAGE, FUNCTION_DEFINITION, VOLATILITY, IS_NULL_CALL, IS_SECURE, CREATED, 
    LAST_ALTERED, COMMENT, IS_EXTERNAL, API_INTEGRATION, CONTEXT_HEADERS, MAX_BATCH_ROWS, REQUEST_TRANSLATOR, 
    RESPONSE_TRANSLATOR, COMPRESSION, IMPORTS, HANDLER, TARGET_PATH, RUNTIME_VERSION, PACKAGES, 
    INSTALLED_PACKAGES, IS_MEMOIZABLE, EXTERNAL_ACCESS_INTEGRATIONS, SECRETS, IS_DATA_METRIC, IS_AGGREGATE
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.FUNCTIONS WHERE FUNCTION_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;

    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_INDEXES (
    SESSION_ID, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, NAME, OWNER, IS_UNIQUE, CONSTRAINT_NAME, STATUS, CREATED )
    SELECT ''' || :SESSION_ID || ''', TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, NAME, OWNER, IS_UNIQUE, CONSTRAINT_NAME, 
    STATUS, CREATED 
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.INDEXES WHERE TABLE_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;


    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_INDEX_COLUMNS (
    SESSION_ID, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, INDEX_NAME, NAME, KEY_SEQUENCE, INDEX_OWNER, IS_UNIQUE, 
    CONSTRAINT_NAME, STATUS, CREATED )
    SELECT ''' || :SESSION_ID || ''', TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, INDEX_NAME, NAME, KEY_SEQUENCE, 
    INDEX_OWNER, IS_UNIQUE, CONSTRAINT_NAME, STATUS, CREATED
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.INDEX_COLUMNS WHERE TABLE_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;

    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_PROCEDURES (
    SESSION_ID, PROCEDURE_CATALOG, PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_OWNER, ARGUMENT_SIGNATURE, DATA_TYPE, 
    CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE, 
    PROCEDURE_LANGUAGE, PROCEDURE_DEFINITION, CREATED, LAST_ALTERED, COMMENT, EXTERNAL_ACCESS_INTEGRATIONS, SECRETS )
    SELECT ''' || :SESSION_ID || ''', PROCEDURE_CATALOG, PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_OWNER, ARGUMENT_SIGNATURE, DATA_TYPE, 
    CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE, 
    PROCEDURE_LANGUAGE, PROCEDURE_DEFINITION, CREATED, LAST_ALTERED, COMMENT, EXTERNAL_ACCESS_INTEGRATIONS, SECRETS
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.PROCEDURES WHERE PROCEDURE_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;

    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_REFERENTIAL_CONSTRAINTS (
    SESSION_ID, CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, UNIQUE_CONSTRAINT_CATALOG, 
    UNIQUE_CONSTRAINT_SCHEMA, UNIQUE_CONSTRAINT_NAME, MATCH_OPTION, UPDATE_RULE, DELETE_RULE, COMMENT, 
    CREATED, LAST_ALTERED )
    SELECT ''' || :SESSION_ID || ''', CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, UNIQUE_CONSTRAINT_CATALOG, 
    UNIQUE_CONSTRAINT_SCHEMA, UNIQUE_CONSTRAINT_NAME, MATCH_OPTION, UPDATE_RULE, DELETE_RULE, COMMENT, 
    CREATED, LAST_ALTERED
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;


    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_SCHEMAS (
    SESSION_ID, CATALOG_NAME, SCHEMA_NAME, SCHEMA_OWNER, IS_TRANSIENT, IS_MANAGED_ACCESS,
    RETENTION_TIME, DEFAULT_CHARACTER_SET_CATALOG, DEFAULT_CHARACTER_SET_SCHEMA,
    DEFAULT_CHARACTER_SET_NAME, SQL_PATH, CREATED, LAST_ALTERED, COMMENT )
    SELECT ''' || :SESSION_ID || ''', CATALOG_NAME, SCHEMA_NAME, SCHEMA_OWNER, IS_TRANSIENT, IS_MANAGED_ACCESS,
    RETENTION_TIME, DEFAULT_CHARACTER_SET_CATALOG, DEFAULT_CHARACTER_SET_SCHEMA,
    DEFAULT_CHARACTER_SET_NAME, SQL_PATH, CREATED, LAST_ALTERED, COMMENT 
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;


    OPEN SCHEMA_CURSOR USING (:SESSION_ID);

    FOR _RECORD IN SCHEMA_CURSOR DO

        CATALOG_NAME := _RECORD.CATALOG_NAME;
        SCHEMA_NAME := _RECORD.SCHEMA_NAME;

        EXECUTE IMMEDIATE 'SHOW PARAMETERS IN SCHEMA ' || CATALOG_NAME || '.' || SCHEMA_NAME;

        LAST_QUERY_ID := LAST_QUERY_ID();

        UPDATE _METADATA.SNOWFLAKE_SCHEMAS AS t
        SET t.CATALOG_SYNC = s.CATALOG_SYNC, 
            t.CLASSIFICATION_PROFILE = s.CLASSIFICATION_PROFILE, 
            t.DATA_RETENTION_TIME_IN_DAYS = s.DATA_RETENTION_TIME_IN_DAYS, 
            t.DEFAULT_DDL_COLLATION = s.DEFAULT_DDL_COLLATION,
            t.DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU = s.DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU, 
            t.DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU = s.DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU, 
            t.DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE = s.DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE, 
            t.EXTERNAL_VOLUME = s.EXTERNAL_VOLUME, 
            t.LOG_LEVEL = s.LOG_LEVEL, 
            t.MAX_DATA_EXTENSION_TIME_IN_DAYS = s.MAX_DATA_EXTENSION_TIME_IN_DAYS,
            t.REPLACE_INVALID_CHARACTERS = s.REPLACE_INVALID_CHARACTERS, 
            t.STORAGE_SERIALIZATION_POLICY = s.STORAGE_SERIALIZATION_POLICY, 
            t.TRACE_LEVEL = s.TRACE_LEVEL
        FROM (SELECT CATALOG_SYNC, CLASSIFICATION_PROFILE, DATA_RETENTION_TIME_IN_DAYS, DEFAULT_DDL_COLLATION,
                DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU, DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU, 
                DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE, EXTERNAL_VOLUME, LOG_LEVEL, MAX_DATA_EXTENSION_TIME_IN_DAYS,
                REPLACE_INVALID_CHARACTERS, STORAGE_SERIALIZATION_POLICY, TRACE_LEVEL
            FROM (SELECT "key","value" FROM TABLE(RESULT_SCAN(:LAST_QUERY_ID))) 
                PIVOT(MAX("value") FOR "key" IN ('CATALOG_SYNC', 'CLASSIFICATION_PROFILE', 'DATA_RETENTION_TIME_IN_DAYS',
                'DEFAULT_DDL_COLLATION', 'DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU', 'DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU',
                'DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE', 'EXTERNAL_VOLUME', 'LOG_LEVEL', 'MAX_DATA_EXTENSION_TIME_IN_DAYS', 
                'REPLACE_INVALID_CHARACTERS', 'STORAGE_SERIALIZATION_POLICY', 'TRACE_LEVEL'))
                AS X(CATALOG_SYNC, CLASSIFICATION_PROFILE, DATA_RETENTION_TIME_IN_DAYS, DEFAULT_DDL_COLLATION,
                DEFAULT_NOTEBOOK_COMPUTE_POOL_CPU, DEFAULT_NOTEBOOK_COMPUTE_POOL_GPU, DEFAULT_STREAMLIT_NOTEBOOK_WAREHOUSE,
                EXTERNAL_VOLUME, LOG_LEVEL, MAX_DATA_EXTENSION_TIME_IN_DAYS, REPLACE_INVALID_CHARACTERS, 
                STORAGE_SERIALIZATION_POLICY, TRACE_LEVEL)) s
                WHERE t.SESSION_ID = :SESSION_ID AND 
                        t.CATALOG_NAME = :CATALOG_NAME AND 
                        t.SCHEMA_NAME = :SCHEMA_NAME;

    END FOR;

    CLOSE SCHEMA_CURSOR;

    
    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_TABLES (
    SESSION_ID, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_OWNER, TABLE_TYPE, IS_TRANSIENT, CLUSTERING_KEY, 
    ROW_COUNT, BYTES, RETENTION_TIME, SELF_REFERENCING_COLUMN_NAME, REFERENCE_GENERATION, USER_DEFINED_TYPE_CATALOG, 
    USER_DEFINED_TYPE_SCHEMA, USER_DEFINED_TYPE_NAME, IS_INSERTABLE_INTO, IS_TYPED, COMMIT_ACTION, CREATED, 
    LAST_ALTERED, LAST_DDL, LAST_DDL_BY, AUTO_CLUSTERING_ON, COMMENT, IS_TEMPORARY, IS_ICEBERG, IS_DYNAMIC, 
    IS_IMMUTABLE, IS_HYBRID )
    SELECT ''' || :SESSION_ID || ''', TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_OWNER, TABLE_TYPE, IS_TRANSIENT, CLUSTERING_KEY, 
    ROW_COUNT, BYTES, RETENTION_TIME, SELF_REFERENCING_COLUMN_NAME, REFERENCE_GENERATION, USER_DEFINED_TYPE_CATALOG, 
    USER_DEFINED_TYPE_SCHEMA, USER_DEFINED_TYPE_NAME, IS_INSERTABLE_INTO, IS_TYPED, COMMIT_ACTION, CREATED, 
    LAST_ALTERED, LAST_DDL, LAST_DDL_BY, AUTO_CLUSTERING_ON, COMMENT, IS_TEMPORARY, IS_ICEBERG, IS_DYNAMIC, 
    IS_IMMUTABLE, IS_HYBRID
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;

    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_TABLE_CONSTRAINTS (
    SESSION_ID, CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, 
    CONSTRAINT_TYPE, IS_DEFERRABLE, INITIALLY_DEFERRED, ENFORCED, COMMENT, CREATED, LAST_ALTERED, RELY )
    SELECT ''' || :SESSION_ID || ''', CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, 
    CONSTRAINT_TYPE, IS_DEFERRABLE, INITIALLY_DEFERRED, ENFORCED, COMMENT, CREATED, LAST_ALTERED, RELY
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;


    SQLSTMT := 'INSERT INTO _METADATA.SNOWFLAKE_VIEWS (
    SESSION_ID, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_OWNER, VIEW_DEFINITION, CHECK_OPTION, IS_UPDATABLE, 
    INSERTABLE_INTO, IS_SECURE, CREATED, LAST_ALTERED, LAST_DDL, LAST_DDL_BY, COMMENT )
    SELECT ''' || :SESSION_ID || ''', TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_OWNER, VIEW_DEFINITION, CHECK_OPTION, 
    IS_UPDATABLE, INSERTABLE_INTO, IS_SECURE, CREATED, LAST_ALTERED, LAST_DDL, LAST_DDL_BY, COMMENT
    FROM ' || :DATABASE_NAME || '.INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'')';

    EXECUTE IMMEDIATE :SQLSTMT;


    OPEN TABLE_CURSOR USING (:SESSION_ID);

    FOR _RECORD IN TABLE_CURSOR DO

        TABLE_CATALOG := _RECORD.TABLE_CATALOG;
        TABLE_SCHEMA := _RECORD.TABLE_SCHEMA;
        TABLE_NAME := _RECORD.TABLE_NAME;

        EXECUTE IMMEDIATE 'SHOW COLUMNS IN TABLE ' || TABLE_CATALOG || '.' || TABLE_SCHEMA || '.' || TABLE_NAME;

        LAST_QUERY_ID := LAST_QUERY_ID();

        UPDATE _METADATA.SNOWFLAKE_COLUMNS C
            SET C.COLUMN_KIND = R."kind",
                C.COLUMN_EXPRESSION = R."expression"
        FROM TABLE(RESULT_SCAN(:LAST_QUERY_ID)) R 
        WHERE ( "kind" != 'COLUMN' OR "expression" != '' ) AND
            C.TABLE_CATALOG = :TABLE_CATALOG AND
            C.TABLE_SCHEMA = :TABLE_SCHEMA AND
            C.TABLE_NAME =:TABLE_NAME AND
            R."column_name" = C.COLUMN_NAME;

    END FOR;

    CLOSE TABLE_CURSOR;

    -- CALL _CODE.SNOWFLAKE_IMPORT_SESSION(:SESSION_ID, 'STANDARD', TRUE, FALSE) INTO :RESPONSE;
    CALL _CODE.SNOWFLAKE_IMPORT_SESSION(:SESSION_ID, 'TRIAL', TRUE, FALSE) INTO :RESPONSE;

    IF (:RESPONSE != 'SESSION IMPORTED') THEN
        -- DON'T CONTINUE TO TRY LOADING DATA UNTIL ISSUE IS FIXED
        RETURN 'IMPORT ERROR: ' || :RESPONSE;
    END IF;
    
END;
